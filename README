***ABILITIES***

- Supports only MySQL.

- Generates DbTables, DbTable_Rows, DbTable_Rowsets with DocBlock tags that
gives you autocompletion when coding in an IDE.

    http://img703.imageshack.us/img703/4783/screenshotzodekenautoco.png

- Defines DbTable relationships following InnoDB's relationships.

    /**
     * @var array
     */
    protected $_primary = array('id');

    /**
     * @var array
     */
    protected $_dependentTables = array('Application_Model_DbTable_PostsTags');

    /**
     * @var array
     */
    protected $_referenceMap = array(        
        'Category' => array(
            'columns' => 'category_id',
            'refTableClass' => 'Application_Model_DbTable_Category',
            'refColumns' => 'id'
        ),

        'Member' => array(
            'columns' => 'owner_id',
            'refTableClass' => 'Application_Model_DbTable_Member',
            'refColumns' => 'id'
        )
    );

- Adds some commonly used methods to DbTable: fetchPairs (an array of 
key => value pairs), fetchOne (value of first column's first field), fetchOnes 
(an array that is a list of fetchOne)
    
- Detects the relationships between the tables and generates basically necessary
methods.

    One-to-many: $memberRow->getPostRows(), $postRow->getMemberRow()
    Many-to-many: $tagRow->getPostRows(), $postRow->getTagRows()
    
- Uses proper form element for each data type. For example: enum/set -> radio,
varchar/char... -> text, text/longtext... -> textarea, foreign key -> select...

- Adds validators and filters depending on data type of the field.

- Adds a drop-down list for a foreign key field to the form:

    $tableCategory = new Application_Model_DbTable_Category();
    $this->addElement(
        $this->createElement('select', 'category_id')
            ->setLabel('Category Id')
            ->setMultiOptions(array("" => "- - Select - -") 
                + $tableCategory->fetchPairs())
            ->setRequired(true)
            ->setDecorators($this->elementDecorators)
    );

***INSTALLATION***

1. Place the folder Zodeken into a folder that covered by your include_path
setting. Or simply, just place Zodeken into the same folder with your Zend 
library, for example:

    /usr/share/php/
        Zend/
        Zodeken/
        
2. Edit your .zf.ini (usually located at your home folder), append this line:

    basicloader.classes.20 = "Zodeken_ZfTool_ZodekenProvider"
    
You may change the number 20 to another one that you prefer.

3. Done

***USAGE***

1. "chdir" to the project folder created by Zend tool

    $ zf create project zfproject
    $ cd zfproject
    
2. Configure database settings in the application.ini file

3. Run the command

    $ zf generate zodeken
    
4. Done

***IMPORTANT NOTES***

Do not change anything in the DbTables, DbTable_Rowsets and DbTable_Rows, they 
will be overwritten every time you re-generate them. Instead, you can write your 
custom Model methods in Mapper files.
